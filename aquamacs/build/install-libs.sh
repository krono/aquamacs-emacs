#!/bin/bash
#
# Copy the necessary homebrew libraries into the new Aquamacs
# application bundle and sign it.

# This script was generated by Claude.ai with direction by Win Treese.

if [ $# -ne 1 ]; then
    echo "Usage: $0 <path-to-app-bundle>"
    echo "The path is usually nextstep/Aquamacs.app"
    exit 1
fi

APP_PATH="$1"
CONTENTS_PATH="${APP_PATH}/Contents"
FRAMEWORKS_PATH="${CONTENTS_PATH}/Frameworks"
MACOS_PATH="${CONTENTS_PATH}/MacOS"
MAIN_BINARY="${MACOS_PATH}/Aquamacs"

# Determine the architecture we need
ARCH=$(lipo -archs "$MAIN_BINARY" | awk '{print $1}')
echo "Looking for $ARCH libraries..."

# Create Frameworks directory if it doesn't exist
mkdir -p "$FRAMEWORKS_PATH"

# Function to check if a library matches our architecture
is_compatible_lib() {
    local lib="$1"
    if [ ! -f "$lib" ]; then
        return 1
    fi
    local lib_archs=$(lipo -archs "$lib" 2>/dev/null)
    [[ $lib_archs =~ $ARCH ]]
}

# Function to resolve @rpath
resolve_rpath() {
    local lib="$1"
    local binary="$2"

    # If not an @rpath library, return as-is
    if [[ "$lib" != "@rpath/"* ]]; then
        echo "$lib"
        return
    fi

    # Extract the library name from @rpath/name
    local lib_name="${lib#@rpath/}"

    # Common locations to search
    local search_paths=(
        "/usr/local/opt/*/lib"
        "/usr/local/lib"
        "/opt/homebrew/opt/*/lib"
        "/opt/homebrew/lib"
    )

    # Search for the library
    for search_path in "${search_paths[@]}"; do
        for found_lib in $(find $search_path -name "$lib_name" 2>/dev/null); do
            if is_compatible_lib "$found_lib"; then
                echo "$found_lib"
                return
            fi
        done
    done

    # If not found, echo original path
    echo "$lib"
}

# Function to update library paths in a binary
update_library_paths() {
    local binary="$1"

    otool -L "$binary" | tail -n +2 | while read -r line; do
        lib=$(echo "$line" | awk '{print $1}')
        local lib_name=$(basename "$lib")

        # Skip system libraries
        if [[ "$lib" == "/System/"* || "$lib" == "/usr/lib/"* ]]; then
            continue
        fi

        if [ -f "${FRAMEWORKS_PATH}/${lib_name}" ]; then
            echo "Updating reference in $(basename "$binary"): $lib -> @executable_path/../Frameworks/${lib_name}"
            install_name_tool -change "$lib" "@executable_path/../Frameworks/${lib_name}" "$binary" \
                              2>&1 | grep -v 'invalidate the code signature'
        fi
    done
}

# Function to copy library and its dependencies
copy_library() {
    local binary="$1"
    local lib

    echo "------- Process library $1"
    # Get library dependencies
    otool -L "$binary"
    otool -L "$binary" | tail -n +2 | while read -r line; do
        lib=$(echo "$line" | awk '{print $1}')

        # Skip system libraries
        if [[ "$lib" == "/System/"* || "$lib" == "/usr/lib/"* ]]; then
            continue
        fi

        # Resolve @rpath if necessary
        if [[ "$lib" == "@rpath/"* ]]; then
            lib=$(resolve_rpath "$lib" "$binary")
        fi

        # Copy if it's a Homebrew library or resolved @rpath library
        if [[ "$lib" == "/usr/local/opt/"* || "$lib" == "/opt/homebrew/"* || "$lib" == "/usr/local/lib/"* ]]; then
            local lib_name=$(basename "$lib")
            local dest="${FRAMEWORKS_PATH}/${lib_name}"

            # Copy library if not already present
            if [ ! -f "$dest" ]; then
                echo "Copying $lib_name..."
                cp "$lib" "$dest"
                chmod 644 "$dest"

                # Update the library's ID
                install_name_tool -id "@executable_path/../Frameworks/${lib_name}" "$dest" \
                                  2>&1 | grep -v 'invalidate the code signature'

                # Process this library's dependencies recursively
                copy_library "$dest"
            else
                echo "Library $lib_name already present"
            fi

            # XXX Update binary to use the embedded library
            # Claude doesn't have this anymore?
            # install_name_tool -change "$lib" "@executable_path/../Frameworks/${lib_name}" "$binary"
        fi
    done
    echo "------ Done with library $1"
}

# First, copy all dependencies recursively
echo "Copying dependencies..."
copy_library "$MAIN_BINARY"

# Then update all library paths in the main binary
echo "Updating paths in main binary..."
update_library_paths "$MAIN_BINARY"

# Finally update paths in all copied libraries
echo "Updating paths in frameworks..."
for lib in "$FRAMEWORKS_PATH"/*; do
    if [ -f "$lib" ]; then
        update_library_paths "$lib"
    fi
done

echo "Library dependencies have been copied and paths updated."
echo "Note: The application will need to be re-signed before distribution."
echo ""
echo "You can verify the library paths with:"
echo "otool -L $MAIN_BINARY"
for lib in "$FRAMEWORKS_PATH"/*; do
    if [ -f "$lib" ]; then
        echo "otool -L $lib"
    fi
done
